import os
import random as rand
from time import strftime, sleep
from secrets import Secrets
from selenium import webdriver
from selenium.common.exceptions import (ElementClickInterceptedException,
                                        NoSuchElementException,
                                        TimeoutException)
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager
from contextlib import contextmanager
from fake_useragent import FakeUserAgentError, UserAgent
import concurrent.futures
import pandas as pd


ua = None
while True:
    try:
        ua = UserAgent()
        break
    except FakeUserAgentError:
        print('fake user agent error')
        continue
    except Exception:
        continue

fake_agent = ua.random

os.chdir(os.path.dirname(__file__))

@contextmanager
def driver(*args, **kwargs):
    chrome_options = Options()
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--start-maximized')
    chrome_options.add_argument('--start-fullscreen')
    chrome_options.add_argument('--single-process')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument("--incognito")
    chrome_options.add_argument('--disable-blink-features=AutomationControlled')
    chrome_options.add_experimental_option('useAutomationExtension', False)
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_argument("--headless")
    chrome_options.add_argument(f'user-agent={fake_agent}')
    chrome_options.add_argument('--ignore-ssl-errors=yes')
    chrome_options.add_argument('--ignore-certificate-errors')
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-popup-blocking")

    d = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options,)
    d.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    d.execute_cdp_cmd("Page.addScriptToEvaluateOnNewDocument", {
        "source":
            "const newProto = navigator.__proto__;"
            "delete newProto.webdriver;"
            "navigator.__proto__ = newProto;"
    })

    try:
        yield d
    finally:
        d.quit()

class Bot:

    def __init__(self, driver) -> None:
    	self.driver = driver
    	
    	
    	



def main():
	with driver() as wd:
		bot = Bot(wd)









if __name__ == '__main__':
	main()









